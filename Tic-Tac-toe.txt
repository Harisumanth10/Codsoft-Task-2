print( "Try program ")
print ("welcome to Tic-Tac-Toe")
print("you are 'x' and the ai is 'O'")
        
import math


def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)


def check_winner(board, player):
    
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False


def is_full(board):
    return all([board[i][j] != "." for i in range(3) for j in range(3)])


def minimax(board, depth, is_maximizing, alpha, beta):
    if check_winner(board, "X"):
        return 1
    if check_winner(board, "O"):
        return -1
    if is_full(board):
        return 0
    
    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ".":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = "."
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ".":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = "."
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval


def best_move(board):
    best_score = -math.inf
    move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == ".":
                board[i][j] = "X"
                score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = "."
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move


def play_game():
    board = [["." for _ in range(3)] for _ in range(3)]
    while True:
    
        print_board(board)
        

       
        row, col = map(int, input("Enter your move (row col): ").split())
        if board[row][col] != ".":
            print("Invalid move, try again.")
            continue
        board[row][col] = "O"
        
        if check_winner(board, "O"):
            print_board(board)
            print("You win!")
            break
        
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
     
        print("AI is making a move...")
        ai_move = best_move(board)
        board[ai_move[0]][ai_move[1]] = "X"
        
        if check_winner(board, "X"):
            print_board(board)
            print("AI wins!")
            break
        
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

play_game()
